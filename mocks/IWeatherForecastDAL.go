// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "crservice/entity"

	mock "github.com/stretchr/testify/mock"

	model "crservice/model"
)

// IWeatherForecastDAL is an autogenerated mock type for the IWeatherForecastDAL type
type IWeatherForecastDAL struct {
	mock.Mock
}

// GetMarineWaveHeight provides a mock function with given fields: ctx, params
func (_m *IWeatherForecastDAL) GetMarineWaveHeight(ctx *context.Context, params model.MarineWaveHeightForecastReq) (*entity.MarineForecast, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetMarineWaveHeight")
	}

	var r0 *entity.MarineForecast
	var r1 error
	if rf, ok := ret.Get(0).(func(*context.Context, model.MarineWaveHeightForecastReq) (*entity.MarineForecast, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(*context.Context, model.MarineWaveHeightForecastReq) *entity.MarineForecast); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MarineForecast)
		}
	}

	if rf, ok := ret.Get(1).(func(*context.Context, model.MarineWaveHeightForecastReq) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIWeatherForecastDAL creates a new instance of IWeatherForecastDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWeatherForecastDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWeatherForecastDAL {
	mock := &IWeatherForecastDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
